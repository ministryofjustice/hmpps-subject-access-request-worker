package uk.gov.justice.digital.hmpps.subjectaccessrequestworker.services

import com.google.gson.Gson
import com.itextpdf.kernel.pdf.PdfDocument
import com.itextpdf.kernel.pdf.PdfReader
import com.itextpdf.kernel.pdf.canvas.parser.PdfTextExtractor
import com.itextpdf.layout.Document
import com.microsoft.applicationinsights.TelemetryClient
import org.apache.commons.lang3.StringUtils
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith
import org.junit.jupiter.api.io.CleanupMode
import org.junit.jupiter.api.io.TempDir
import org.mockito.Mock
import org.mockito.junit.jupiter.MockitoExtension
import uk.gov.justice.digital.hmpps.subjectaccessrequestworker.models.DpsService
import uk.gov.justice.digital.hmpps.subjectaccessrequestworker.models.SubjectAccessRequest
import uk.gov.justice.digital.hmpps.subjectaccessrequestworker.services.pdf.PdfParameters
import uk.gov.justice.digital.hmpps.subjectaccessrequestworker.services.pdf.PdfService
import java.io.ByteArrayOutputStream
import java.io.File
import java.io.InputStreamReader
import java.nio.file.Files
import java.nio.file.Path
import java.time.LocalDate
import java.util.UUID

@ExtendWith(MockitoExtension::class)
class PdfServiceTest {

  private lateinit var legacyPdfService: GeneratePdfService
  private lateinit var newPdfService: PdfService

  @TempDir(cleanup = CleanupMode.ALWAYS)
  private lateinit var tempDir: Path

  @Mock
  private lateinit var telemetryClient: TelemetryClient

  @BeforeEach
  fun setup() {
    this.legacyPdfService = GeneratePdfService()
    this.newPdfService = PdfService(TemplateRenderService(), YamlFormatter(), telemetryClient)
  }

  @Test
  fun `PDFs generated by new service matches those generated by legacy service`() {
    val params = PdfParameters(
      services = listOf(
        DpsService(
          name = "hmpps-accredited-programmes-api",
          orderPosition = 1,
          content = getTestData("accredited-programmes-stub"),
        ),
        DpsService(
          name = "hmpps-book-secure-move-api",
          orderPosition = 2,
          content = getTestData("book-secure-move-stub"),
        ),
        DpsService(name = "hmpps-uof-data-api", orderPosition = 2, content = getTestData("use-of-force-stub")),
        DpsService(
          name = "hmpps-approved-premises-api",
          orderPosition = 4,
          content = getTestData("approved-premises-stub"),
        ),
      ),
      nomisId = "1234",
      ndeliusCaseReferenceId = "nDeliusRef123",
      sarCaseReferenceNumber = "sarCaseRef",
      subjectName = "Lord Voldemort",
      dateFrom = LocalDate.now().minusYears(1),
      dateTo = LocalDate.now(),
      subjectAccessRequest = SubjectAccessRequest(id = UUID.randomUUID()),
    )

    val legacySarPdf = generateLegacyReport(params).toFile()
    val newSarPdf = generateNewReport(params).toFile()

    assertThat(legacySarPdf.isFile).isTrue()
    assertThat(newSarPdf.isFile).isTrue()
    assertThat(Files.size(legacySarPdf.toPath())).isEqualTo(Files.size(newSarPdf.toPath()))
    assertReportContentsEquals(getDocument(legacySarPdf), getDocument(legacySarPdf))
  }

  @Test
  fun `PDFs generated by new service matches those generated by legacy service when no template is used`() {
    val params = PdfParameters(
      services = listOf(
        DpsService(name = "x", orderPosition = 1, content = getTestData("accredited-programmes-stub")),
        DpsService(name = "y", orderPosition = 2, content = getTestData("book-secure-move-stub")),
        DpsService(name = "z", orderPosition = 2, content = getTestData("use-of-force-stub")),
        DpsService(name = "0", orderPosition = 4, content = getTestData("approved-premises-stub")),
      ),
      nomisId = "1234",
      ndeliusCaseReferenceId = "nDeliusRef123",
      sarCaseReferenceNumber = "sarCaseRef",
      subjectName = "Lord Voldemort",
      dateFrom = LocalDate.now().minusYears(1),
      dateTo = LocalDate.now(),
      subjectAccessRequest = SubjectAccessRequest(id = UUID.randomUUID()),
    )

    val legacySarPdf = generateLegacyReport(params).toFile()
    println(legacySarPdf)
    val newSarPdf = generateNewReport(params).toFile()
    println(newSarPdf)

    assertThat(legacySarPdf.isFile).isTrue()
    assertThat(newSarPdf.isFile).isTrue()
    assertThat(Files.size(legacySarPdf.toPath())).isEqualTo(Files.size(newSarPdf.toPath()))
    assertReportContentsEquals(getDocument(legacySarPdf), getDocument(legacySarPdf))
  }

  private fun assertReportContentsEquals(legacyDoc: Document, newDoc: Document) {
    legacyDoc.use {
      newDoc.use {
        val legacyPdf = legacyDoc.pdfDocument
        val newPdf = newDoc.pdfDocument

        assertThat(legacyPdf.numberOfPages).isEqualTo(newPdf.numberOfPages)

        for (i in 1 until legacyPdf.numberOfPages) {
          val originalPage = PdfTextExtractor.getTextFromPage(legacyPdf.getPage(i))
          val refactorPage = PdfTextExtractor.getTextFromPage(newPdf.getPage(i))

          assertThat(refactorPage)
            .withFailMessage(
              "Refactored PDF did not match legacy PDF content. Diff: (Page $i) \"${
                StringUtils.difference(
                  originalPage,
                  refactorPage,
                )
              }\"",
            )
            .isEqualTo(originalPage)
        }
      }
    }
  }

  private fun generateLegacyReport(params: PdfParameters): Path {
    return legacyPdfService.execute(
      services = params.services,
      nomisId = params.nomisId,
      ndeliusCaseReferenceId = params.ndeliusCaseReferenceId,
      sarCaseReferenceNumber = params.sarCaseReferenceNumber,
      subjectName = params.subjectName,
      dateFrom = params.dateFrom,
      dateTo = params.dateTo,
      subjectAccessRequest = params.subjectAccessRequest,
      pdfStream = ByteArrayOutputStream(),
    ).use { stream ->
      Files.write(tempDir.resolve("sar-legacy.pdf"), stream.toByteArray())
    }
  }

  private fun generateNewReport(params: PdfParameters): Path {
    return newPdfService.generateSubjectAccessRequestPDF(params).byteArrayOutputStream.use { stream ->
      Files.write(tempDir.resolve("sar-new.pdf"), stream.toByteArray())
    }
  }

  fun getDocument(file: File): Document = Document(PdfDocument(PdfReader(file)))

  fun getTestData(filename: String): Any? {
    val stubData =
      PdfServiceTest::class.java.classLoader.getResourceAsStream("service-data-stubs/$filename.json")?.let {
        InputStreamReader(it).use { reader ->
          val map: Map<*, *> = Gson().fromJson(reader, Map::class.java)
          map["content"] as Any
        }
      }
    assertThat(stubData).isNotNull
    return stubData
  }
}
